{
	"$schema": "https://biomejs.dev/schemas/2.0.0/schema.json",
	"formatter": {
		"enabled": true,
		"formatWithErrors": true,
		"indentStyle": "space",
		"indentWidth": 2,
		"lineEnding": "lf",
		"lineWidth": 80,
		"attributePosition": "auto"
	},
	"assist": {
		"actions": {
			"source": {
				"organizeImports": "on"
			}
		}
	},
	"linter": {
		"enabled": true,
		"rules": {
			"a11y": {
				// Enforce that the accessKey attribute is not used on any HTML element.
				"noAccessKey": "error",
				// Enforce that aria-hidden="true" is not set on focusable elements.
				"noAriaHiddenOnFocusable": "error",
				// Enforce that elements that do not support ARIA roles, states, and properties do not have those attributes.
				"noAriaUnsupportedElements": "error",
				// Enforces that no distracting elements are used.
				"noDistractingElements": "error",
				// The scope prop should be used only on <th> elements.
				"noHeaderScope": "error",
				// Enforce that non-interactive ARIA roles are not assigned to interactive HTML elements.
				"noInteractiveElementToNoninteractiveRole": "error",
				// Enforce that a label element or component has a text label and an associated input.
				"noLabelWithoutControl": "error",
				// Enforce that interactive ARIA roles are not assigned to non-interactive HTML elements.
				"noNoninteractiveElementToInteractiveRole": "error",
				// Enforce that tabIndex is not assigned to non-interactive HTML elements.
				"noNoninteractiveTabindex": "error",
				// Prevent the usage of positive integers on tabIndex property
				"noPositiveTabindex": "error",
				// Enforce img alt prop does not contain the word "image", "picture", or "photo".
				"noRedundantAlt": "error",
				// Enforce explicit role property is not the same as implicit/default role property on an element.
				"noRedundantRoles": "error",
				// Enforce that static, visible elements (such as <div>) that have click handlers use the valid role attribute.
				"noStaticElementInteractions": "error",
				// Enforces the usage of the title element for the svg element.
				"noSvgWithoutTitle": "error",
				// Enforce that all elements that require alternative text have meaningful information to relay back to the end user.
				"useAltText": "error",
				// Enforce that anchors have content and that the content is accessible to screen readers.
				"useAnchorContent": "error",
				// Enforce that tabIndex is assigned to non-interactive HTML elements with aria-activedescendant.
				"useAriaActivedescendantWithTabindex": "error",
				// Enforce that elements with ARIA roles must have all required ARIA attributes for that role.
				"useAriaPropsForRole": "error",
				// Enforce that ARIA properties are valid for the roles that are supported by the element.
				"useAriaPropsSupportedByRole": "error",
				// Enforces the usage of the attribute type for the element button
				"useButtonType": "error",
				// Elements with an interactive role and interaction handlers must be focusable.
				"useFocusableInteractive": "error",
				// Enforce that heading elements (h1, h2, etc.) have content and that the content is accessible to screen readers. Accessible means that it is not hidden using the aria-hidden prop.
				"useHeadingContent": "error",
				// Enforce that html element has lang attribute.
				"useHtmlLang": "error",
				// Enforces the usage of the attribute title for the element iframe.
				"useIframeTitle": "error",
				// Enforce onClick is accompanied by at least one of the following: onKeyUp, onKeyDown, onKeyPress.
				"useKeyWithClickEvents": "error",
				// Enforce onMouseOver / onMouseOut are accompanied by onFocus / onBlur.
				"useKeyWithMouseEvents": "error",
				// Enforces that audio and video elements must have a track for captions.
				"useMediaCaption": "error",
				// It detects the use of role attributes in JSX elements and suggests using semantic elements instead.
				"useSemanticElements": "error",
				// Enforce that all anchors are valid, and they are navigable elements.
				"useValidAnchor": "error",
				// Ensures that ARIA properties aria-* are all valid.
				"useValidAriaProps": "error",
				// Elements with ARIA roles must use a valid, non-abstract ARIA role.
				"useValidAriaRole": "error",
				// Enforce that ARIA state and property values are valid.
				"useValidAriaValues": "error",
				// Use valid values for the autocomplete attribute on input elements.
				"useValidAutocomplete": "error",
				// Ensure that the attribute passed to the lang attribute is a correct ISO language and/or country.
				"useValidLang": "error",

				// Enforce that autoFocus prop is not used on elements.
				"noAutofocus": "off"
			},
			"complexity": {
				// Disallow unclear usage of consecutive space characters in regular expression literals
				"noAdjacentSpacesInRegex": "error",
				// Disallow the use of arguments.
				"noArguments": "error",
				// Disallow primitive type aliases and misleading types.
				"noBannedTypes": "error",
				// Disallow comma operator.
				"noCommaOperator": "error",
				// Disallow empty type parameters in type aliases and interfaces.
				"noEmptyTypeParameters": "error",
				// Disallow functions that exceed a given Cognitive Complexity score.
				"noExcessiveCognitiveComplexity": "error",
				// This rule enforces a maximum depth to nested describe() in test files.
				"noExcessiveNestedTestSuites": "error",
				// Disallow unnecessary boolean casts
				"noExtraBooleanCast": "error",
				// Disallow to use unnecessary callback on flatMap.
				"noFlatMapIdentity": "error",
				// Prefer for...of statement instead of Array.forEach.
				"noForEach": "error",
				// This rule reports when a class has no non-static members, such as for a class used exclusively as a static namespace.
				"noStaticOnlyClass": "error",
				// Disallow this and super in static contexts.
				"noThisInStatic": "error",
				// Disallow unnecessary catch clauses.
				"noUselessCatch": "error",
				// Disallow unnecessary constructors.
				"noUselessConstructor": "error",
				// Avoid using unnecessary continue.
				"noUselessContinue": "error",
				// Disallow empty exports that don't change anything in a module file.
				"noUselessEmptyExport": "error",
				// Disallow unnecessary escape sequence in regular expression literals.
				"noUselessEscapeInRegex": "error",
				// Disallow unnecessary fragments
				"noUselessFragments": "error",
				// Disallow unnecessary labels.
				"noUselessLabel": "error",
				// Disallow unnecessary nested block statements.
				"noUselessLoneBlockStatements": "error",
				// Disallow renaming import, export, and destructured assignments to the same name.
				"noUselessRename": "error",
				// Disallow unnecessary concatenation of string or template literals.
				"noUselessStringConcat": "error",
				// Disallow unnecessary String.raw function in template string literals without any escape sequence.
				"noUselessStringRaw": "error",
				// Disallow useless case in switch statements.
				"noUselessSwitchCase": "error",
				// Disallow ternary operators when simpler alternatives exist.
				"noUselessTernary": "error",
				// Disallow useless this aliasing.
				"noUselessThisAlias": "error",
				// Disallow using any or unknown as type constraint.
				"noUselessTypeConstraint": "error",
				// Disallow initializing variables to undefined.
				"noUselessUndefinedInitialization": "error",
				// Disallow the use of void operators, which is not a familiar operator.
				"noVoid": "error",
				// Use arrow functions over function expressions.
				"useArrowFunction": "error",
				// Use Date.now() to get the number of milliseconds since the Unix Epoch.
				"useDateNow": "error",
				// Promotes the use of .flatMap() when map().flat() are used together.
				"useFlatMap": "error",
				// Enforce the usage of a literal access to properties over computed property access.
				"useLiteralKeys": "error",
				// Disallow parseInt() and Number.parseInt() in favor of binary, octal, and hexadecimal literals
				"useNumericLiterals": "error",
				// Enforce using concise optional chain instead of chained logical expressions.
				"useOptionalChain": "error",
				// Enforce the use of the regular expression literals instead of the RegExp constructor if possible.
				"useRegexLiterals": "error",
				// Disallow number literal object member names which are not base 10 or use underscore as separator.
				"useSimpleNumberKeys": "error",
				// Discard redundant terms from logical expressions.
				"useSimplifiedLogicExpression": "error",
				// Enforce the use of while loops instead of for loops when the initializer and update expressions are not needed.
				"useWhile": "error"
			},
			"correctness": {
				// Prevent passing of children as props.
				"noChildrenProp": "error",
				// Prevents from having const variables being re-assigned.
				"noConstAssign": "error",
				// Disallow constant expressions in conditions
				"noConstantCondition": "error",
				// Disallow the use of Math.min and Math.max to clamp a value where the result itself is constant.
				"noConstantMathMinMaxClamp": "error",
				// Disallow returning a value from a constructor.
				"noConstructorReturn": "error",
				// Disallow empty character classes in regular expression literals.
				"noEmptyCharacterClassInRegex": "error",
				// Disallows empty destructuring patterns.
				"noEmptyPattern": "error",
				// Disallow calling global object properties as functions
				"noGlobalObjectCalls": "error",
				// Disallow function and var declarations that are accessible outside their block.
				"noInnerDeclarations": "error",
				// Ensure that builtins are correctly instantiated.
				"noInvalidBuiltinInstantiation": "error",
				// Prevents the incorrect use of super() inside classes. It also checks whether a call super() is missing from classes that extends other constructors.
				"noInvalidConstructorSuper": "error",
				// Disallow the use of variables and function parameters before their declaration
				"noInvalidUseBeforeDeclaration": "error",
				// Disallow \8 and \9 escape sequences in string literals.
				"noNonoctalDecimalEscape": "error",
				// Disallow literal numbers that lose precision
				"noPrecisionLoss": "error",
				// Restrict imports of private exports.
				"noPrivateImports": "error",
				// Prevent the usage of the return value of React.render.
				"noRenderReturnValue": "error",
				// Disallow assignments where both sides are exactly the same.
				"noSelfAssign": "error",
				// Disallow returning a value from a setter
				"noSetterReturn": "error",
				// Disallow comparison of expressions modifying the string case with non-compliant value.
				"noStringCaseMismatch": "error",
				// Disallow lexical declarations in switch clauses.
				"noSwitchDeclarations": "error",
				// Prevents the usage of variables that haven't been declared inside the document.
				"noUndeclaredVariables": "error",
				// Disallow unreachable code
				"noUnreachable": "error",
				// Ensures the super() constructor is called exactly once on every code path in a class constructor before this is accessed if the class has a superclass
				"noUnreachableSuper": "error",
				// Disallow control flow statements in finally blocks.
				"noUnsafeFinally": "error",
				// Disallow the use of optional chaining in contexts where the undefined value is not allowed.
				"noUnsafeOptionalChaining": "error",
				// Disallow unused function parameters.
				"noUnusedFunctionParameters": "error",
				// Disallow unused imports.
				"noUnusedImports": "error",
				// Disallow unused labels.
				"noUnusedLabels": "error",
				// Disallow unused private class members
				"noUnusedPrivateClassMembers": "error",
				// Disallow unused variables.
				"noUnusedVariables": "error",
				// This rules prevents void elements (AKA self-closing elements) from having children.
				"noVoidElementsWithChildren": "error",
				// Disallow returning a value from a function with the return type 'void'
				"noVoidTypeReturn": "error",
				// Enforce all dependencies are correctly specified in a React hook.
				"useExhaustiveDependencies": "error",
				// Enforce that all React hooks are being called from the Top Level component functions.
				"useHookAtTopLevel": "error",
				// Require calls to isNaN() when checking for NaN.
				"useIsNan": "error",
				// Disallow missing key props in iterators/collection literals.
				"useJsxKeyInIterable": "error",
				// Enforce "for" loop update clause moving the counter in the right direction.
				"useValidForDirection": "error",
				// This rule checks that the result of a typeof expression is compared to a valid value.
				"useValidTypeof": "error",
				// Require generator functions to contain yield.
				"useYield": "error",

				// Disallow the use of dependencies that aren't specified in the package.json.
				"noUndeclaredDependencies": "off",
				// Enforce file extensions for relative imports.
				"useImportExtensions": "off",
				// Forbid the use of Node.js builtin modules.
				"noNodejsModules": "off"
			},
			"nursery": {
				"all": true,
				"noCommonJs": "off",
				"noProcessEnv": "off",
				"noSecrets": "off",
				"useComponentExportOnlyModules": "off",
				"useExplicitType": "off",
				"useImportRestrictions": "off",
				"useConsistentCurlyBraces": "off",
				"useSortedClasses": {
					"fix": "safe",
					"level": "error",
					"options": {
						"attributes": ["className"],
						"functions": ["clsx", "cva", "tw", "twMerge", "cn", "twJoin"]
					}
				}
			},
			"performance": {
				"noBarrelFile": "off",
				"noReExportAll": "off"
			},
			"style": {
				"noDefaultExport": "off",
				"noImplicitBoolean": "off",
				"useExplicitLengthCheck": "off",
				"noNamespaceImport": "off",
				"useFilenamingConvention": {
					"level": "error",
					"options": {
						"requireAscii": true,
						"filenameCases": ["kebab-case"]
					}
				},
				"useSingleVarDeclarator": "off",
				"useNamingConvention": "off"
			},
			"suspicious": {
				"noReactSpecificProps": "off",
				"noArrayIndexKey": "off"
			}
		}
	},
	"javascript": {
		"formatter": {
			"arrowParentheses": "always",
			"attributePosition": "auto",
			"bracketSameLine": false,
			"bracketSpacing": true,
			"enabled": true,
			"indentStyle": "space",
			"indentWidth": 2,
			"jsxQuoteStyle": "double",
			"lineEnding": "lf",
			"lineWidth": 80,
			"quoteProperties": "asNeeded",
			"quoteStyle": "single",
			"semicolons": "always",
			"trailingCommas": "es5"
		}
	},
	"css": {
		"formatter": {
			"indentStyle": "space",
			"indentWidth": 2,
			"lineEnding": "lf",
			"lineWidth": 80,
			"quoteStyle": "double"
		},
		"parser": {
			"allowWrongLineComments": false,
			"cssModules": false
		}
	},
	"json": {
		"formatter": {
			"enabled": true,
			"indentStyle": "space",
			"indentWidth": 2,
			"lineEnding": "lf",
			"lineWidth": 80,
			"trailingCommas": "none"
		},
		"linter": {
			"enabled": true
		},
		"parser": {
			"allowComments": false,
			"allowTrailingCommas": false
		}
	},
	"vcs": {
		"enabled": true,
		"clientKind": "git",
		"useIgnoreFile": true,
		"defaultBranch": "main"
	}
}
